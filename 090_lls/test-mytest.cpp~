#include <assert.h>

#include <cstdlib>

#include "ll.h"

void testList(void) {
  LinkedList<int> test;
  test.addFront(10);
  test.addBack(9);
  test.addFront(8);
  test.addBack(7);
  test.addFront(6);
  test.remove(6);
  test.remove(7);
  assert(test.tail->data == 9);
  assert(test.head->data == 8);
  assert(test.tail->next == NULL);
  test.remove(10);
  assert(test.tail->prev == test.head);
  assert(test.head->next == test.tail);
  test.remove(9);
  assert(test.head == test.tail);
}

int main(void) {
  testList();

  // constructor
  LinkedList<int> l1;
  assert(l1.getSize() == 0);
  l1.addFront(2);
  l1.addBack(3);
  assert(l1.getSize() == 2);
  assert(l1[0] == 2);
  assert(l1[1] == 3);

  // copy constructor
  IntList l2(l1);
  assert(l2.getSize() == 2);
  assert(l2[0] == 2);
  assert(l2[1] == 3);
  l2.addBack(5);
  assert(l2[2] == 5);
  l2.remove(3);
  assert(l2.getSize() == 2);
  assert(l2[1] == 5);

  // assignment constructor
  IntList l3;
  l3 = l2;
  assert(l3.getSize() == 2);
  assert(l3[0] == 2);
  assert(l3[1] == 5);
  l3.addBack(7);
  l3.addBack(8);
  assert(l3.getSize() == 4);
  assert(l3[2] == 7);
  assert(l3[3] == 8);

  // remove
  IntList l4;
  assert(l4.remove(5) == false);
  l4.addBack(0);
  l4.addBack(1);
  l4.addBack(2);
  l4.addBack(3);
  l4.addBack(4);
  assert(l4.remove(5) == false);
  assert(l4.remove(0) == true);
  assert(l4[0] == 1);
  assert(l4.getSize() == 4);
  assert(l4.remove(4) == true);
  assert(l4.getSize() == 3);
  assert(l4.remove(2) == true);

  // find
  IntList l5;
  assert(l5.find(1) == -1);
  assert(l4.find(1) == 0);
  assert(l4.find(3) == 1);

  return EXIT_SUCCESS;
}
